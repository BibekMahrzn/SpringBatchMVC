<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	">

	<import resource="../config/context.xml" />
	<import resource="../config/database.xml" />

	<!--<bean id="report" class="com.me.model.Report" scope="prototype" />-->
	<bean id="report2" class="com.me.model.Report2" scope="prototype" />
	<!--<bean id="users" class="com.me.model.User" scope="prototype" />-->
	<!--<bean id="users" class="com.me.model.Candidate" scope="prototype" />-->
	<bean id="itemProcessor" class="com.me.CustomItemProcessor2" />

	<batch:job id="helloWorldJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader2" writer="mysqlItemWriter2" processor="itemProcessor"
					commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!--########db to db with parameter-->
	<bean id="itemReader4"
		  class="org.springframework.batch.item.database.JdbcCursorItemReader"
		  scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
				  value="SELECT * FROM SMSTEST WHERE CHALANDATE='#{jobParameters['date']}' AND STATUS='0'"/>
		<property name="rowMapper">
			<bean class="com.me.UserRowMapper4" />
		</property>
	</bean>

	<bean id="mysqlItemWriter4"
		  class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
				<![CDATA[
				update smstest set status=1 where studentmasterid=:id and advtcode=:avtCode
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
					class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<!--########db to db -->
	<bean id="itemReader3"
		  class="org.springframework.batch.item.database.JdbcCursorItemReader"
		  scope="step">
		<property name="dataSource" ref="dataSource" />
		<property name="sql"
				  value="select ID, USER_LOGIN, USER_PASS, AGE from USERS where age = #{jobParameters['age']}" />
		<property name="rowMapper">
			<bean class="com.me.UserRowMapper" />
		</property>
	</bean>

	<bean id="mysqlItemWriter3"
		  class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
				<![CDATA[
            	insert into users2 values (:id, :username, :password, :age)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
					class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<!--##### cvs to xml-->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<property name="resource" value="classpath:cvs/input/report.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="id,sales,qty,staffName,date" />
					</bean>
				</property>
				<property name="fieldSetMapper">
				    <bean class="com.me.ReportFieldSetMapper" />
				    
				    <!-- if no data type conversion, use BeanWrapperFieldSetMapper to map by name
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
					 -->
				</property>
			</bean>
		</property>

	</bean>

	<bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
		<!--<property name="resource" value="file:xml/outputs/report.xml" />-->
		<property name="resource" value="classpath:output/report.xml"/>
		<property name="marshaller" ref="reportMarshaller" />
		<property name="rootTagName" value="report" />
	</bean>

	<!--####### cvs to mysql-->
	<bean id="cvsFileItemReader2" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="classpath:cvs/input/report2.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				<!-- split it -->
				<property name="lineTokenizer">
					<bean
							class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="date,impressions,clicks,earning" />
					</bean>
				</property>

				<property name="fieldSetMapper">
					<bean class="com.me.ReportFieldSetMapper2" />
					<!-- return back to reader, rather than a mapped object. -->
					<!--
                        <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                    -->

					<!-- map to an object -->
					<!--<bean-->
							<!--class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">-->
						<!--<property name="prototypeBeanName" ref="report2" />-->
					<!--</bean>-->

				</property>

			</bean>
		</property>

	</bean>

	<bean id="mysqlItemWriter2"
		  class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
				<![CDATA[
            	insert into RAW_REPORT(DATE,IMPRESSIONS,CLICKS,EARNING) values (:date, :impressions, :clicks, :earning)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
					class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<!--<value>com.me.model.Report</value>-->
				<value>com.me.model.Report2</value>
				<!--<value>com.me.model.User</value>-->
				<!--<value>com.me.model.Candidate</value>-->
			</list>
		</property>
	</bean>


</beans>